plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id 'com.bmuschko.docker-remote-api' version '6.6.1'
    id 'jacoco'
    id 'java'
    id 'application'
}

group = 'segelzwerg'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

application {
    mainClass = 'segelzwerg.sporttooolbox.SporttooolboxApplication'
}

wrapper {
    gradleVersion = '6.7'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    codacy
}

repositories {
    mavenCentral()
    /*maven {
        url "https://plugins.gradle.org/m2/"
    }*/
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    implementation 'com.konghq:unirest-java:3.11.04'
    implementation 'io.github.ititus:ititus-commons:1.1.0'
    testImplementation 'io.florianlopes:spring-mvc-test-utils:3.0.0'

    codacy 'com.codacy:codacy-coverage-reporter:latest.release'
}

test {
    useJUnitPlatform()
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

check.dependsOn jacocoTestReport
